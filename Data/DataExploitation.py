import os

_NamePath = "Data/noms2008nat_text.txt"
_SurnameGirlsPath = "Data/prenoms_donnees_filles.csv"
_SurnameBoysPath = "Data/prenoms_donnees_garcons.csv"
_FreqPathPrenom = "Data/freq_prenoms.csv"
_FreqPathNom = "Data/freq_noms.csv"


def _create_prenoms_freq_file() -> None:
    """Creates a file containing the frequency of each prenom in the database for 2020"""
    total = 0
    dict_prenoms_et_nombre = {}
    print("Creating prenoms frequency file...")

    # Opening the bois file
    with open(_SurnameBoysPath) as fp:
        print("Reading")
        fp.readlines(5<<5) #Removes the first useless lines
        fp.readline()
        lines = fp.readlines()

        for line in lines:
            print(line)
            region, prenom_garcons, nombre = line.rstrip().split(";")
            #prenom_garcons = prenom_garcons.casefold() check le comment en bas
            if prenom_garcons not in dict_prenoms_et_nombre:
                dict_prenoms_et_nombre[prenom_garcons] = int(nombre.replace(' ', ''))
            else:
                dict_prenoms_et_nombre[prenom_garcons] += int(nombre.replace(' ', ''))
            total += int(nombre.replace(' ', ''))
    
    # Opening the girls file
    with open(_SurnameGirlsPath) as fs:
        print("Reading")
        fs.readlines(5<<5) #Removes the first useless lines
        fs.readline()
        lines = fs.readlines()

        for line in lines:
            region, prenoms_filles, nombre = line.rstrip().split(";")
            #prenoms_filles = prenoms_filles.casefold() a voir si c'est utile ou pas pour la db
            if prenoms_filles not in dict_prenoms_et_nombre:
                dict_prenoms_et_nombre[prenoms_filles] = int(nombre.replace(' ', ''))
            else:
                dict_prenoms_et_nombre[prenoms_filles] += int(nombre.replace(' ', ''))
            total += int(nombre.replace(' ', ''))

    print(dict_prenoms_et_nombre)

    with open(_FreqPathPrenom, 'w') as f:
        print("Writing")
        for prenom in dict_prenoms_et_nombre:
            f.write(f"{prenom};{dict_prenoms_et_nombre[prenom]/total}\n")


def _create_noms_freq_file(period: tuple(int,int) = (1991, 2000)) -> None:
    """Creates a file containing the frequency of each name in the database for a given period"""
    assert period[0] < period[1], "The first year of the period must be lower than the second"

    with open(_NamePath) as f:
        liste_entete_avec_les_dates = f.readline().split(";")
        assert '_' + str(period[0]) + '_' + str(period[1]) in liste_entete_avec_les_dates, "The period is not in the database"
    pass


def get_prenoms(limit: int = None) -> list:
    """Returns a list of surnames with their frequency"""
    if not os.path.exists(_FreqPathPrenom) and os.path.exists(_SurnameBoysPath) and os.path.exists(_SurnameGirlsPath):
        _create_prenoms_freq_file()
    else:
        raise FileNotFoundError("The files containing the prenoms for both genders do not exist")
    assert limit < 17, 'The db only has 17 surnames'

    pass


def get_noms(limit: int = None, period: tuple(int,int) = (1991,2000)) -> list:
    """Returns a list of names with their respective frequencies"""
    if not os.path.exists(_FreqPathNom) and os.path.exists(_NamePath):
        _create_noms_freq_file(period)
    else:
        raise FileNotFoundError("The file containing the names does not exist")

    pass
