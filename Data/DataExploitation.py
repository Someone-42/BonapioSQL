import os

_NamePath = "Data/noms2008nat_text.txt"
_SurnameGirlsPath = "Data/prenoms_donnees_filles.csv"
_SurnameBoysPath = "Data/prenoms_donnees_garcons.csv"
_FreqPathPrenom = "Data/freq_prenoms.csv"
_FreqPathNom = "Data/freq_noms.csv"

def _get_first_name_freq(file_name: str, d: dict) -> int:
    """ Modifies the dictionary with new names frequency - Returns the total added frequency"""
    total = 0
    # Opening the bois file
    with open(file_name) as fp:
        print("Reading first names :", file_name)
        fp.readlines(5<<5) #Removes the first useless lines
        fp.readline()
        lines = fp.readlines()

        for line in lines:
            print(line)
            _region_, first_name, nombre = line.rstrip().split(";")
            #prenom_garcons = prenom_garcons.casefold() check le comment en bas
            if first_name not in d:
                d[first_name] = int(nombre.replace(' ', ''))
            else:
                d[first_name] += int(nombre.replace(' ', ''))
            total += int(nombre.replace(' ', ''))
    return total

def _write_name_freqs_to_file(file_name: str, total: int, name_freqs: dict) -> None:
    with open(file_name, 'w') as f:
        print("Writing to names frequency file")
        f.write(f"{total}\n")
        for name, freq in name_freqs.values():
            f.write(f"{name};{freq}\n")

def _read_name_freqs_file(file_name: str) -> tuple:
    """ Returns a tuple, with the total frequencies added, and the list of names and their respective frequencies """
    name_freqs = []
    total = -1
    with open(file_name) as f:
        total = int(f.readline)
        for line in f.readlines():
            nom, freq = line.split(';')
            freq = int(freq)
            name_freqs.append((nom, freq))
    
    return (total, name_freqs)

def _create_prenoms_freq_file() -> None:
    """Creates a file containing the frequency of each prenom in the database for 2020"""
    total = 0
    dict_prenoms_et_nombre = {}
    print("Creating prenoms frequency file...")
    
    total += _get_first_name_freq(_SurnameGirlsPath, dict_prenoms_et_nombre)
    total += _get_first_name_freq(_SurnameBoysPath, dict_prenoms_et_nombre)

    _write_name_freqs_to_file(_FreqPathPrenom, total, dict_prenoms_et_nombre)

def _create_noms_freq_file(period: list = [(1991, 2000)]) -> None:
    """Creates a file containing the frequency of each name in the database for a given period"""
    assert period[0] < period[1], "The first year of the period must be lower than the second"
    total = 0
    dict_noms_et_nombre = {}

    print("Creating noms frequency file...")
    with open(_NamePath) as f:
        print("Reading")
        liste_entete_avec_les_dates = f.readline().split("\t")
        period_indices = []
        for p in period:
            s = '_' + str(p[0]) + '_' + str(p[1])
            ind = liste_entete_avec_les_dates.index(s)
            assert ind > 0, "The period is not in the database" # bigger than 0 bc first index is the names column
            period_indices.append(ind)
        lines = f.readlines()
        for line in lines:
            name_and_dates_freq = line.split('\t')
            freq = sum([name_and_dates_freq[i] for i in period_indices]) # Gathers the sum of frequencies over every period selected
            name = name_and_dates_freq[0]

            dict_noms_et_nombre[name] = freq
            total += freq

    _write_name_freqs_to_file(_FreqPathNom, total, dict_noms_et_nombre)

def get_prenoms(limit: int = None) -> tuple:
    """Returns a tuple, with the total frequency, and a list of surnames with their frequency"""
    freq_compiled_firstnames_exists = os.path.exists(_FreqPathPrenom)
    freq_boys_exists = os.path.exists(_SurnameBoysPath)
    freq_girls_exists = os.path.exists(_SurnameGirlsPath)
    if not freq_compiled_firstnames_exists:
        if freq_boys_exists and freq_girls_exists:
            _create_prenoms_freq_file()
        else:
            raise FileNotFoundError("A file for first names (boys or girls) is missing, cannot compile name frequencies")

    return _read_name_freqs_file(_FreqPathPrenom)

def get_noms(limit: int = None, period: list = [(1991,2000)]) -> list:
    """Returns a list of names with their respective frequencies"""
    if not os.path.exists(_FreqPathNom):
        if os.path.exists(_NamePath):
            _create_noms_freq_file(period)
        else:
            raise FileNotFoundError("The file containing names does not exist")

    return _read_name_freqs_file(_FreqPathNom)
